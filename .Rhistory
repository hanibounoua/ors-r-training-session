mutate(Province.State = ifelse(test = is.na(Province.State), Country.Region, Province.State)) %>%
group_by(Province.State) %>%
arrange(date) %>%
mutate(daily.recovered = recovered - dplyr::lag(recovered,1)) %>%
replace_na(list(daily.recovered = 0)) %>%
ungroup()
recovered <- recovered %>%
mutate(Province.State = ifelse(test = is.na(Province.State), Country.Region, Province.State))
recovered <- recovered %>%
mutate(Province.State = ifelse(test = is.na(Province.State), Country.Region, Province.State)) %>%
group_by(Province.State) %>%
arrange(date) %>%
mutate(daily.recovered = recovered - dplyr::lag(recovered,1)) %>%
replace_na(list(daily.recovered = 0)) %>%
ungroup()
recovered <- recovered %>%
mutate(Province.State = ifelse(test = is.na(Province.State), Country.Region, Province.State)) %>%
group_by(Province.State) %>% ungroup()
recovered <- recovered %>% ungroup()
recovered %>%
mutate(Province.State = ifelse(test = is.na(Province.State), Country.Region, Province.State)) %>%
group_by(Province.State) %>%
arrange(date) %>%
mutate(daily.recovered = recovered - dplyr::lag(recovered,1))
recovered %>%
mutate(Province.State = ifelse(test = is.na(Province.State), Country.Region, Province.State)) %>%
group_by(Province.State) %>%
arrange(date)
recovered %>%
mutate(Province.State = ifelse(test = is.na(Province.State), Country.Region, Province.State)) %>%
group_by(Province.State) %>%
arrange(date) %>%
mutate(daily.recovered = recovered - dplyr::lag(recovered))
recovered %>%
mutate(Province.State = ifelse(test = is.na(Province.State), Country.Region, Province.State)) %>%
group_by(Province.State) %>%
arrange(date) %>%
mutate(daily.recovered = recovered - dplyr::lag(recovered))
recovered
recovered %>%
mutate(Province.State = ifelse(test = is.na(Province.State), Country.Region, Province.State)) %>%
group_by(Province.State) %>%
arrange(date) %>%
mutate(daily.recovered = recovered - dplyr::lag(recovered,1)
recovered %>%
recovered %>%
mutate(Province.State = ifelse(test = is.na(Province.State), Country.Region, Province.State)) %>%
group_by(Province.State) %>%
arrange(date) %>%
mutate(daily.recovered = recovered - dplyr::lag(recovered,1))
recovered %>%
mutate(Province.State = ifelse(test = is.na(Province.State), Country.Region, Province.State)) %>%
group_by(Province.State) %>%
arrange(date) %>%
mutate(daily.recovered = recovered - dplyr::lag(recovered,1))
ma_premiere_variable <- "hello world!!!!"
maPremiereVariable <- 12
maDeuxiemeVariable <- 10
leResultat <- maPremiereVariable - maDeuxiemeVariable
leResultat
monPremierVecteur <- c(1, 4, 2, 3)
testHeteroGene <- c(1, "R", TRUE)
length(monPremierVecteur)
monPremierVecteur[2:4]
monPremierVecteur[2]
maPremiereMatrice <- matrix(monPremierVecteur, nrow = 2, ncol = 2, byrow = TRUE)
maPremiereMatrice
maPremiereMatrice[1, 2]
maPremiereMatrice[,2]
maPremiereMatrice[1,]
maPremiereListe <- list("Introduction A la Programmation R", 23, TRUE)
maPremiereListe[1]
maPremiereListe[[1]]
maDeuxiemeListe <- list(leTitre = "Introduction A la Programmation R", nombreQlq = 23, Booleen = TRUE)
maDeuxiemeListe$leTitre
monPremierDF <- data.frame(Age = c(10, 20, 18, 32), Genre = c("H", "F", "H", "F"))
monPremierDF
monPremierDF[2,]
monPremierDF[1, 2]
monPremierDF[1, "Genre"]
monPremierDF$Genre[1]
help(xor)
ifelse(2 < 1, "Deux est effectivement superieur a un", "C 'est faux")
library('tidyverse')
df_1 <- read_csv("./data/time_series_covid19_confirmed_global.csv")
df_2 <- read_csv("./data/time_series_covid19_deaths_global.csv")
df_3 <- read_csv("./data/time_series_covid19_recovered_global.csv")
library(nycflights13)
library(DBI)
library(RSQLite)
con <- dbConnect(SQLite(), "./data/nycflights13.sqlite")
copy_to(con, airports)
copy_to(con, flights)
copy_to(con, airlines)
copy_to(con, planes)
copy_to(con, weather)
#df <- tbl(con, "airports")
confirmed <- df_1 %>%
pivot_longer(ends_with("/20"), names_to = "date", values_to = "confirmed")
deaths <- df_2 %>%
pivot_longer(ends_with("/20"), names_to = "date", values_to = "death")
Recovered <- df_3 %>%
pivot_longer(ends_with("/20"), names_to = "date", values_to = "recovred")
confirmed %>%
pivot_wider(names_from = "date", values_from = "confirmed") %>%
head(.,10)
confirmed <- confirmed %>%
rename(Province.State = 'Province/State', Country.Region = 'Country/Region')
deaths <- deaths %>%
rename(Province.State = 'Province/State', Country.Region = 'Country/Region')
Recovered <- Recovered %>%
rename(Province.State = 'Province/State', Country.Region = 'Country/Region')
head(confirmed)
confirmed %>%
select(Province.State, Country.Region, date, confirmed) %>%
head()
confirmed <- confirmed %>%
rename(date1 = date) %>%
mutate(date = lubridate::mdy(date1)) %>%
select(-date1)
deaths <- deaths %>%
mutate(date = lubridate::mdy(date))
Recovered <- Recovered %>%
mutate(date = lubridate::mdy(date))
confirmed %>%
dplyr::filter(Country.Region == 'Algeria', confirmed > 0)
library(dplyr)
confirmed %>%
arrange(confirmed)
# confirmed <- confirmed %>%
#   mutate(Province.State = ifelse(test = is.na(Province.State), Country.Region, Province.State)) %>%
#   group_by(Province.State) %>%
#   arrange(date) %>%
#   mutate(daily.cases = confirmed - dplyr::lag(confirmed,1)) %>%
#   replace_na(list(daily.cases = 0)) %>%
#   ungroup()
#
#
# deaths <- deaths %>%
#   mutate(Province.State = ifelse(test = is.na(Province.State), Country.Region, Province.State)) %>%
#   group_by(Province.State) %>%
#   arrange(date) %>%
#   mutate(daily.death = death - dplyr::lag(death,1)) %>%
#   replace_na(list(daily.death = 0)) %>%
#   ungroup()
Recovered <- Recovered %>%
mutate(Province.State = ifelse(test = is.na(Province.State), Country.Region, Province.State)) %>%
group_by(Province.State) %>%
arrange(date) %>%
mutate(daily.recovered = recovered - dplyr::lag(recovered,1)) %>%
replace_na(list(daily.recovered = 0)) %>%
ungroup()
Recovered %>%
mutate(Province.State = ifelse(test = is.na(Province.State), Country.Region, Province.State)) %>%
group_by(Province.State) %>%
arrange(date) %>%
mutate(daily.recovered = recovered - dplyr::lag(recovered,1))
ma_premiere_variable <- "hello world!!!!"
maPremiereVariable <- 12
maDeuxiemeVariable <- 10
leResultat <- maPremiereVariable - maDeuxiemeVariable
leResultat
monPremierVecteur <- c(1, 4, 2, 3)
testHeteroGene <- c(1, "R", TRUE)
length(monPremierVecteur)
monPremierVecteur[2:4]
monPremierVecteur[2]
maPremiereMatrice <- matrix(monPremierVecteur, nrow = 2, ncol = 2, byrow = TRUE)
maPremiereMatrice
maPremiereMatrice[1, 2]
maPremiereMatrice[,2]
maPremiereMatrice[1,]
maPremiereListe <- list("Introduction A la Programmation R", 23, TRUE)
maPremiereListe[1]
maPremiereListe[[1]]
maDeuxiemeListe <- list(leTitre = "Introduction A la Programmation R", nombreQlq = 23, Booleen = TRUE)
maDeuxiemeListe$leTitre
monPremierDF <- data.frame(Age = c(10, 20, 18, 32), Genre = c("H", "F", "H", "F"))
monPremierDF
monPremierDF[2,]
monPremierDF[1, 2]
monPremierDF[1, "Genre"]
monPremierDF$Genre[1]
help(xor)
ifelse(2 < 1, "Deux est effectivement superieur a un", "C 'est faux")
library('tidyverse')
df_1 <- read_csv("./data/time_series_covid19_confirmed_global.csv")
df_2 <- read_csv("./data/time_series_covid19_deaths_global.csv")
df_3 <- read_csv("./data/time_series_covid19_recovered_global.csv")
library(nycflights13)
library(DBI)
library(RSQLite)
con <- dbConnect(SQLite(), "./data/nycflights13.sqlite")
copy_to(con, airports)
copy_to(con, flights)
copy_to(con, airlines)
copy_to(con, planes)
copy_to(con, weather)
#df <- tbl(con, "airports")
confirmed <- df_1 %>%
pivot_longer(ends_with("/20"), names_to = "date", values_to = "confirmed")
deaths <- df_2 %>%
pivot_longer(ends_with("/20"), names_to = "date", values_to = "death")
Recovered <- df_3 %>%
pivot_longer(ends_with("/20"), names_to = "date", values_to = "recovred")
confirmed %>%
pivot_wider(names_from = "date", values_from = "confirmed") %>%
head(.,10)
confirmed <- confirmed %>%
rename(Province.State = 'Province/State', Country.Region = 'Country/Region')
deaths <- deaths %>%
rename(Province.State = 'Province/State', Country.Region = 'Country/Region')
Recovered <- Recovered %>%
rename(Province.State = 'Province/State', Country.Region = 'Country/Region')
head(confirmed)
confirmed %>%
select(Province.State, Country.Region, date, confirmed) %>%
head()
confirmed <- confirmed %>%
rename(date1 = date) %>%
mutate(date = lubridate::mdy(date1)) %>%
select(-date1)
deaths <- deaths %>%
mutate(date = lubridate::mdy(date))
Recovered <- Recovered %>%
mutate(date = lubridate::mdy(date))
confirmed %>%
dplyr::filter(Country.Region == 'Algeria', confirmed > 0)
library(dplyr)
confirmed %>%
arrange(confirmed)
# confirmed <- confirmed %>%
#   mutate(Province.State = ifelse(test = is.na(Province.State), Country.Region, Province.State)) %>%
#   group_by(Province.State) %>%
#   arrange(date) %>%
#   mutate(daily.cases = confirmed - dplyr::lag(confirmed,1)) %>%
#   replace_na(list(daily.cases = 0)) %>%
#   ungroup()
#
#
# deaths <- deaths %>%
#   mutate(Province.State = ifelse(test = is.na(Province.State), Country.Region, Province.State)) %>%
#   group_by(Province.State) %>%
#   arrange(date) %>%
#   mutate(daily.death = death - dplyr::lag(death,1)) %>%
#   replace_na(list(daily.death = 0)) %>%
#   ungroup()
Recovered <- Recovered %>%
mutate(Province.State = ifelse(test = is.na(Province.State), Country.Region, Province.State)) %>%
group_by(Province.State) %>%
arrange(date) %>%
mutate(daily.recovered = recovered - dplyr::lag(recovered,1)) %>%
replace_na(list(daily.recovered = 0)) %>%
ungroup()
Recovered <- Recovered %>%
mutate(Province.State = ifelse(test = is.na(Province.State), Country.Region, Province.State)) %>%
group_by(Province.State) %>%
arrange(date) %>%
mutate(daily.recovered = recovered - dplyr::lag(recovered,1)) %>%
replace_na(list(daily.recovered = 0)) %>%
ungroup()
Recovered <- Recovered %>%
mutate(Province.State = ifelse(test = is.na(Province.State), Country.Region, Province.State)) %>%
group_by(Province.State) %>%
arrange(date) %>%
mutate(daily.recovered = recovered - dplyr::lag(recovered,1)) %>%
replace_na(list(daily.recovered = 0)) %>%
ungroup()
head(Recovered)
confirmed <- confirmed %>%
mutate(Province.State = ifelse(test = is.na(Province.State), Country.Region, Province.State)) %>%
group_by(Province.State) %>%
arrange(date) %>%
mutate(daily.cases = confirmed - dplyr::lag(confirmed,1)) %>%
replace_na(list(daily.cases = 0)) %>%
ungroup()
deaths <- deaths %>%
mutate(Province.State = ifelse(test = is.na(Province.State), Country.Region, Province.State)) %>%
group_by(Province.State) %>%
arrange(date) %>%
mutate(daily.death = death - dplyr::lag(death,1)) %>%
replace_na(list(daily.death = 0)) %>%
ungroup()
recovered <- recovered %>%
mutate(Province.State = ifelse(test = is.na(Province.State), Country.Region, Province.State)) %>%
group_by(Province.State) %>%
arrange(date) %>%
mutate(daily.recovered = recovered - dplyr::lag(recovered,1)) %>%
replace_na(list(daily.recovered = 0)) %>%
ungroup()
ma_premiere_variable <- "hello world!!!!"
maPremiereVariable <- 12
maDeuxiemeVariable <- 10
leResultat <- maPremiereVariable - maDeuxiemeVariable
leResultat
monPremierVecteur <- c(1, 4, 2, 3)
testHeteroGene <- c(1, "R", TRUE)
length(monPremierVecteur)
monPremierVecteur[2:4]
monPremierVecteur[2]
maPremiereMatrice <- matrix(monPremierVecteur, nrow = 2, ncol = 2, byrow = TRUE)
maPremiereMatrice
maPremiereMatrice[1, 2]
maPremiereMatrice[,2]
maPremiereMatrice[1,]
maPremiereListe <- list("Introduction A la Programmation R", 23, TRUE)
maPremiereListe[1]
maPremiereListe[[1]]
maDeuxiemeListe <- list(leTitre = "Introduction A la Programmation R", nombreQlq = 23, Booleen = TRUE)
maDeuxiemeListe$leTitre
monPremierDF <- data.frame(Age = c(10, 20, 18, 32), Genre = c("H", "F", "H", "F"))
monPremierDF
monPremierDF[2,]
monPremierDF[1, 2]
monPremierDF[1, "Genre"]
monPremierDF$Genre[1]
help(xor)
ifelse(2 < 1, "Deux est effectivement superieur a un", "C 'est faux")
library('tidyverse')
df_1 <- read_csv("./data/time_series_covid19_confirmed_global.csv")
df_2 <- read_csv("./data/time_series_covid19_deaths_global.csv")
df_3 <- read_csv("./data/time_series_covid19_recovered_global.csv")
library(nycflights13)
library(DBI)
library(RSQLite)
con <- dbConnect(SQLite(), "./data/nycflights13.sqlite")
copy_to(con, airports)
copy_to(con, flights)
copy_to(con, airlines)
copy_to(con, planes)
copy_to(con, weather)
#df <- tbl(con, "airports")
confirmed <- df_1 %>%
pivot_longer(ends_with("/20"), names_to = "date", values_to = "confirmed")
deaths <- df_2 %>%
pivot_longer(ends_with("/20"), names_to = "date", values_to = "death")
recovered <- df_3 %>%
pivot_longer(ends_with("/20"), names_to = "date", values_to = "recovered")
confirmed %>%
pivot_wider(names_from = "date", values_from = "confirmed") %>%
head(.,10)
confirmed <- confirmed %>%
rename(Province.State = 'Province/State', Country.Region = 'Country/Region')
deaths <- deaths %>%
rename(Province.State = 'Province/State', Country.Region = 'Country/Region')
recovered <- recovered %>%
rename(Province.State = 'Province/State', Country.Region = 'Country/Region')
head(confirmed)
confirmed %>%
select(Province.State, Country.Region, date, confirmed) %>%
head()
confirmed <- confirmed %>%
rename(date1 = date) %>%
mutate(date = lubridate::mdy(date1)) %>%
select(-date1)
deaths <- deaths %>%
mutate(date = lubridate::mdy(date))
recovered <- recovered %>%
mutate(date = lubridate::mdy(date))
confirmed %>%
dplyr::filter(Country.Region == 'Algeria', confirmed > 0)
library(dplyr)
confirmed %>%
arrange(confirmed)
confirmed <- confirmed %>%
mutate(Province.State = ifelse(test = is.na(Province.State), Country.Region, Province.State)) %>%
group_by(Province.State) %>%
arrange(date) %>%
mutate(daily.cases = confirmed - dplyr::lag(confirmed,1)) %>%
replace_na(list(daily.cases = 0)) %>%
ungroup()
deaths <- deaths %>%
mutate(Province.State = ifelse(test = is.na(Province.State), Country.Region, Province.State)) %>%
group_by(Province.State) %>%
arrange(date) %>%
mutate(daily.death = death - dplyr::lag(death,1)) %>%
replace_na(list(daily.death = 0)) %>%
ungroup()
recovered <- recovered %>%
mutate(Province.State = ifelse(test = is.na(Province.State), Country.Region, Province.State)) %>%
group_by(Province.State) %>%
arrange(date) %>%
mutate(daily.recovered = recovered - dplyr::lag(recovered,1)) %>%
replace_na(list(daily.recovered = 0)) %>%
ungroup()
head(recovered)
confirmed <- confirmed %>%
mutate(Province.State = ifelse(test = is.na(Province.State), Country.Region, Province.State)) %>%
group_by(Province.State) %>%
arrange(date) %>%
mutate(daily.cases = confirmed - dplyr::lag(confirmed,1)) %>%
replace_na(list(daily.cases = 0)) %>%
ungroup()
deaths <- deaths %>%
mutate(Province.State = ifelse(test = is.na(Province.State), Country.Region, Province.State)) %>%
group_by(Province.State) %>%
arrange(date) %>%
mutate(daily.death = death - dplyr::lag(death,1)) %>%
replace_na(list(daily.death = 0)) %>%
ungroup()
recovered <- recovered %>%
mutate(Province.State = ifelse(test = is.na(Province.State), Country.Region, Province.State)) %>%
group_by(Province.State) %>%
arrange(date) %>%
mutate(daily.recovered = recovered - dplyr::lag(recovered,1)) %>%
replace_na(list(daily.recovered = 0)) %>%
ungroup()
confirmed %>%
select(date, confirmed) %>%
group_by(date) %>%
summarise(global.confirmed = sum(confirmed), number = n()) %>%
ggplot(mapping = aes(x = date, y = global.confirmed)) +
geom_line()
confirmed <- confirmed %>%
mutate(Province.State = ifelse(test = is.na(Province.State), Country.Region, Province.State))
deaths <- deaths %>%
mutate(Province.State = ifelse(test = is.na(Province.State), Country.Region, Province.State))
Recovered <- Recovered %>%
mutate(Province.State = ifelse(test = is.na(Province.State), Country.Region, Province.State))
all_data <- confirmed %>%
left_join(deaths, by = c("Province.State", "Country.Region", "Lat", "Long", "date")) %>%
left_join(Recovered, by = c("Province.State", "Country.Region", "Lat", "Long", "date"))
head(all_data)
confirmed <- confirmed %>%
mutate(Province.State = ifelse(test = is.na(Province.State), Country.Region, Province.State))
deaths <- deaths %>%
mutate(Province.State = ifelse(test = is.na(Province.State), Country.Region, Province.State))
recovered <- recovered %>%
mutate(Province.State = ifelse(test = is.na(Province.State), Country.Region, Province.State))
all_data <- confirmed %>%
left_join(deaths, by = c("Province.State", "Country.Region", "Lat", "Long", "date")) %>%
left_join(recovered, by = c("Province.State", "Country.Region", "Lat", "Long", "date"))
head(all_data)
con <- dbConnect(SQLite(), "./data/nycflights13.sqlite")
copy_to(con, nycflights13::airports, "airports", temporary = FALSE)
copy_to(con, nycflights13::flights, "flights", temporary = FALSE)
copy_to(con, nycflights13::airlines, "airlines", temporary = FALSE)
copy_to(con, nycflights13::planes, "planes", temporary = FALSE)
copy_to(con, nycflights13::weather, "weather", temporary = FALSE)
df <- tbl(con, "airports")
flights_db <- tbl(con, "flights")
View(flights_db)
flights_db
flights_db %>% show_query()
library(nycflights13)
library(DBI)
library(RSQLite)
con <- dbConnect(SQLite(), "./data/nycflights13.sqlite")
copy_to(con, nycflights13::airports, "airports", temporary = FALSE)
flights_db <- tbl(con, "flights")
flights_db %>% show_query()
flights_db
flights_db %>%
select(-c(year, day)) %>%
filter(month %in% 6:9) %>%
show_query()
flights_db %>%
select(-c(year, day)) %>%
filter(month %in% 6L:9L) %>%
show_query()
flights_db %>%
select(-c(year, day)) %>%
filter(month %in% as.integer(6:9)) %>%
show_query()
library(nycflights13)
library(DBI)
library(RSQLite)
con <- dbConnect(SQLite(), "./data/nycflights13.sqlite")
copy_to(con, nycflights13::airports, "airports", temporary = FALSE)
con <- DBI::dbConnect(RSQLite::SQLite(), "./data/nycflights13.sqlite")
copy_to(con, nycflights13::airports, "airports", temporary = FALSE)
con <- DBI::dbConnect(RSQLite::SQLite(), "./data/nycflights13.sqlite")
copy_to(con, nycflights13::airports, "airports", temporary = FALSE)
copy_to(con, nycflights13::flights, "flights", temporary = FALSE)
copy_to(con, nycflights13::airlines, "airlines", temporary = FALSE)
copy_to(con, nycflights13::planes, "planes", temporary = FALSE)
copy_to(con, nycflights13::weather, "weather", temporary = FALSE)
flights_db <- tbl(con, "flights")
flights_db %>%
select(-c(year, day)) %>%
filter(month == 8) %>%
show_query()
flights_db %>%
select(-c(year, day)) %>%
filter(month == 8L) %>%
show_query()
flights_db %>%
select(-c(year, day)) %>%
filter(tailnum == "	N14542") %>%
show_query()
flights_db %>%
select(sched_arr_time, arr_delay, carrier, flight, tailnum, origin, dest) %>%
filter(tailnum == "	N14542") %>%
show_query()
flights_db %>%
select(sched_arr_time, arr_delay, carrier, flight, tailnum, origin, dest)
flights_db %>%
select(sched_arr_time, arr_delay, carrier, flight, tailnum, origin, dest) %>%
filter(tailnum == "N14542") %>%
show_query()
flights_db %>%
select(sched_arr_time, arr_delay, carrier, flight, tailnum, origin, dest) %>%
dplyr::filter(tailnum == "N14542") %>%
show_query()
flights_db <- tbl(con, "flights") %>%
select(sched_arr_time, arr_delay, carrier, flight, tailnum, origin, dest) %>%
dplyr::filter(tailnum == "N14542") %>%
show_query()
tbl(con, "flights") %>%
select(sched_arr_time, arr_delay, carrier, flight, tailnum, origin, dest) %>%
dplyr::filter(tailnum == "N14542") %>%
show_query()
